#!/sbin/.core/busybox/sh
# sy

busybox=/sbin/.core/busybox
PATH=$busybox:$PATH

# Check if run under root --------------------------------
if ! ls /data > /dev/null 2> /dev/null; then
    echo "[!] ERROR"
    echo "    ts-binds needs to be invoked"
    echo "    from an elevated shell."
    echo "    Please run 'su' first."
    echo
    echo "Terminating.."
    exit 1
fi

# Functions ----------------------------------------------
MODDIR=/sbin/.core/img/ts-binds
int=/data/media/0
sd=$(grep -m 1 -Eo "/mnt/media_rw/[0-9A-Z]{4}-[0-9A-Z]{4}" /proc/mounts)
folderlist=$MODDIR/cached-folderlist.sh
folderlistuser=$int/ts-binds-folderlist.txt
logfile=$int/ts-binds.log
function printhelp {
    echo "tsbinds [options] [arg]"
    echo 
    echo "Available options:"
    echo 
    echo "help ............... Show this reference text"
    echo "h .................. Ditto"
    echo "bind <bind name> ... Binds a specific entry"
    echo "                     by its name"
    echo "bind all ........... Binds all entries "
    echo "bind o <src> <des> . Binds <src> to <des>"
    echo "check <bind name> .. Check if an entry is binded"
    echo "check all .......... Check if all entries are"
    echo "                     individually binded"
    echo "update ............. Update cached entries if"
    echo "                     the user's entries are"
    echo "                     modified"
    echo "update f ........... Update cached entries"
    echo "                     regardless if the user's"
    echo "                     entries are modified"
    echo "reinit ............. Re-run the script that"
    echo "                     runs on boot"
    echo "disable ............ Disables automatic "
    echo "                     mounting on boot"
    echo "enable ............. Enables automatic "
    echo "                     mounting on boot"
    echo "log ................ Prints out the log"
    echo 
    echo "As of 1.0.8, unbind features are proven"
    echo "useless because the changes in the"
    echo "kernel is not synchronised with the ROM"
    echo "Below are the such features, kept"
    echo "in the script for rare use cases"
    echo
    echo "unbind <bind name> . Unbinds a specific"
    echo "                     entry by its name"
    echo "unbind all ......... Unbinds all entries"
    echo "unbind o <des> ..... Unbinds <des>"
    echo 
    echo "Note: running the command reinit, and unbind, move with \"all\" argument may return \"unmount\" errors. Most of the time they can be safely ignored."
}
function tslog {
    echo -e "$(date +'%F %T'):\n  $1\n" >> $logfile
    echo -e "$1"
}

# No action given ----------------------------------------
if [ ! "$1" ]; then
    echo "E: No action is declared!"
    echo ''
    printhelp

# Print Help ---------------------------------------------
elif [ "$1" == "help" ] || [ "$1" == "h" ]; then
    printhelp

# Bind ---------------------------------------------------
elif [ "$1" == "bind" ]; then
    function folderbind {
        if grep -q "$3" /proc/mounts; then
            tslog "$1 is already binded"
        elif [ ! -d "$2" ] && [ ! -f "$2" ]; then
            tslog "Bind aborted: Folder '$2' as source doesn't exist!"
            return 1
        elif [ ! -d "$3" ] && [ ! -f "$3" ]; then
            tslog "Bind aborted: Folder '$3' as target doesn't exist!"
            return 1
        else
            mount --rbind "$2" "$3" && tslog "Bind successful: $1" || tslog "Bind failed: $1"
        fi
    }
    if [ ! "$2" ]; then
        echo 'E: Bind name is not provided!';
    elif [ "$2" == "all" ]; then
        tslog "Binding all entries"
        source $folderlist
        tslog "All entries were processed"
    elif [ "$2" == "o" ]; then
        folderbind "o" $3 $4
    elif line="$(grep "$2" $folderlist)"; then
        eval $line
    else
        tslog "Unable to bind $2, entry not found in list!"
    fi

# Unbind -------------------------------------------------
elif [ "$1" == "unbind" ]; then
    function folderbind {
        if ! grep -q "$3" /proc/mounts; then
            tslog "$1 is already unbinded"
        else
            umount "$3" && tslog "Unbind successful: $1" || tslog "Unbind failed: $1"
        fi
    }
    if [ ! "$2" ]; then
        echo 'E: Bind name is not provided!';
    elif [ "$2" == "all" ]; then
        tslog "Unbinding all entries"
        source $folderlist
        tslog "All entries were processed"
    elif [ "$2" == "o" ]; then
        folderbind "o" $3 $4
    elif line="$(grep "$2" $folderlist)"; then
        eval $line
    else
        tslog "Unable to unbind $2, entry not found in list!"
    fi

# Check --------------------------------------------------
elif [ "$1" == "check" ]; then
    function folderbind {
        grep -q "$3" /proc/mounts && tslog "$1 is BINDED" || tslog "$1 is NOT binded"
    }
    if [ ! "$2" ]; then
        echo 'E: Bind name is not provided!';
    elif [ "$2" == "all" ]; then
        source $folderlist
        tslog "All entries were checked"
    elif line="$(grep "$2" $folderlist)"; then
        eval $line
    else
        tslog "Unable to check $2, entry not found in list!"
    fi

# Update -------------------------------------------------
elif [ "$1" == "update" ]; then
    if [ ! -f $folderlistuser ]; then
        cp $MODDIR/ts-binds-folderlist.txt $folderlistuser
        chmod 0664 $folderlistuser
        chown 1023:1023 $folderlistuser
        tslog "Copied user list to internal storage"
        tsbinds update
    elif [ ! -f $folderlist ]; then
        cp $folderlistuser $folderlist
        chmod 0755 $folderlist
        chown 0:0 $folderlist
        tslog "Cached the user list"
    elif [ "$2" ] && [ "$2" == "f" ]; then
        cp -f $folderlistuser $folderlist
        tslog "Force-updated cached list"
    elif [ ! $folderlist -nt $folderlistuser ]; then
        tslog "Difference found between cached and original user list"
        cp -f $folderlistuser $folderlist
        chmod 0755 $folderlist
        chown 0:0 $folderlist
        tslog "Updated cached list"
    else
        tslog "No update made to cached list"
    fi

# Reinit -------------------------------------------------
elif [ "$1" == "reinit" ]; then
    tsbinds unbind all
    $MODDIR/service.sh

# Enable or disable --------------------------------------
elif [ "$1" == "disable" ]; then
    touch $MODDIR/disable.txt
    tslog "ts-binds automatic bind disabled"
elif [ "$1" == "enable" ]; then
    rm -f $MODDIR/disable.txt
    tslog "ts-binds automatic bind enabled"

# Print log ----------------------------------------------
elif [ "$1" == "log" ]; then
    cat $logfile
    echo

# Action unrecognised ------------------------------------
else
    echo "E: Unknown action \"$1\" supplied"
fi

# Force log proper permission
chown 1023:1023 $logfile $folderlistuser
chmod 0664 $logfile $folderlistuser
