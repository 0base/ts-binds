#!/system/bin/sh
# sy

# All hail busybox for standardising this script!
busybox=/sbin/.core/busybox
PATH=$busybox:$PATH

# Check if run under root --------------------------------
if ! ls /data > /dev/null 2> /dev/null; then
    echo "[!] ERROR"
    echo "    ts-binds needs to be invoked"
    echo "    from an elevated shell."
    echo "    Please run 'su' first."
    echo
    echo "Terminating.."
    exit 1
fi

# Functions ----------------------------------------------
MODDIR=/sbin/.core/img/ts-binds
datadir=/data/ts-binds
int=/data/media/0
sd=$(grep -m 1 -Eo "/mnt/media_rw/[0-9A-Z]{4}-[0-9A-Z]{4}" /proc/mounts)
folderlist=$datadir/cached-folderlist.sh
folderlistuser=$int/ts-binds-folderlist.txt
logfile=$int/ts-binds.log

function supass {
    /sbin/su -M -c "$@"
}

function printhelp {
    echo "tsbinds [options] [arg]"
    echo 
    echo "Available options:"
    echo 
    echo "help ............... Show this reference text"
    echo "h .................. Ditto"
    echo "pairs .............. Prints out the folder"
    echo "                     pairs in folderlist"
    echo "bind <bind name> ... Binds a specific entry"
    echo "                     by its name"
    echo "bind o <src> <des> . Binds <src> to <des>"
    echo "bind all ........... Binds all entries "
    echo "bind o <src> <des> . Binds <src> to <des>"
    echo "unbind <bind name> . Unbinds a specific"
    echo "                     entry by its name"
    echo "unbind all ......... Unbinds all entries"
    echo "unbind o <des> ..... Unbinds <des>"
    echo "check <bind name> .. Check if an entry is binded"
    echo "check all .......... Check if all entries are"
    echo "                     individually binded"
    echo "update ............. Update cached entries if"
    echo "                     the user's entries are"
    echo "                     modified"
    echo "update f ........... Update cached entries"
    echo "                     regardless if the user's"
    echo "                     entries are modified"
    echo "reinit ............. Re-run the script that"
    echo "                     runs on boot"
    echo "disable ............ Disables automatic "
    echo "                     mounting on boot"
    echo "enable ............. Enables automatic "
    echo "                     mounting on boot"
    echo "log ................ Prints out the log"
    echo "mount .............. Prints out the mount"
    echo "                     entries"
    echo
    
    echo 
    echo "Note: running the command reinit, and unbind, move with \"all\" argument may return \"unmount\" errors. Most of the time they can be safely ignored."
}
function tslog {
    echo -e "$(date +'%F %T'):\n  $1\n" >> $logfile
    echo -e "$1"
}

# No action given ----------------------------------------
if [ ! "$1" ]; then
    echo "E: No action is declared!"
    echo ''
    printhelp

# Print Help ---------------------------------------------
elif [ "$1" == "help" ] || [ "$1" == "h" ]; then
    printhelp

# Bind ---------------------------------------------------
elif [ "$1" == "bind" ]; then
    function folderbind {
        cmd="mountpoint -q \"$3\""
        if (supass $cmd); then
            tslog "$1 is already binded"
        elif [ ! -d "$2" ] && [ ! -f "$2" ]; then
            tslog "Bind aborted: Folder '$2' as source doesn't exist!"
            return 1
        elif [ ! -d "$3" ] && [ ! -f "$3" ]; then
            tslog "Bind aborted: Folder '$3' as target doesn't exist!"
            return 1
        else
            cmd="mount --rbind \"$2\" \"$3\""
            (supass $cmd) && tslog "Bind successful: $1" || tslog "Bind failed: $1"
        fi
    }
    if [ ! "$2" ]; then
        echo 'E: Bind name is not provided!';
    elif [ "$2" == "all" ]; then
        tslog "Binding all entries"
        source $folderlist
        tslog "All entries were processed"
    elif [ "$2" == "o" ]; then
        folderbind "o" $3 $4
    elif line="$(grep -m 1 "$2" $folderlist)"; then
        eval $line
    else
        tslog "Unable to bind $2, entry not found in list!"
    fi

# Unbind -------------------------------------------------
elif [ "$1" == "unbind" ]; then
    function folderbind {
        cmd="mountpoint -q \"$3\""
        if ! (supass $cmd); then
            tslog "$1 is already unbinded"
        else
            cmd="umount \"$3\""
            (supass $cmd) && tslog "Unbind successful: $1" || tslog "Unbind failed: $1"
        fi
    }
    if [ ! "$2" ]; then
        echo 'E: Bind name is not provided!';
    elif [ "$2" == "all" ]; then
        tslog "Unbinding all entries"
        source $folderlist
        tslog "All entries were processed"
    elif [ "$2" == "o" ]; then
        folderbind "o" $3 $4
    elif line="$(grep -m 1 "$2" $folderlist)"; then
        eval $line
    else
        tslog "Unable to unbind $2, entry not found in list!"
    fi

# Check --------------------------------------------------
elif [ "$1" == "check" ]; then
    function folderbind {
        cmd="mountpoint -q \"$3\""
        (supass $cmd) && tslog "$1 is BINDED" || tslog "$1 is NOT binded"
    }
    if [ ! "$2" ]; then
        echo 'E: Bind name is not provided!';
    elif [ "$2" == "all" ]; then
        source $folderlist
        tslog "All entries were checked"
    elif line="$(grep -m 1 "$2" $folderlist)"; then
        eval $line
    else
        tslog "Unable to check $2, entry not found in list!"
    fi

# Update -------------------------------------------------
elif [ "$1" == "update" ]; then
    if [ ! -f $folderlistuser ]; then
        cp $datadir/fresh-folderlist.txt $folderlistuser
        tslog "Copied user list to internal storage"
        tsbinds update
    elif [ ! -f $folderlist ]; then
        cp $folderlistuser $folderlist
        tslog "Cached the user list"
    elif [ "$2" ] && [ "$2" == "f" ]; then
        cp -f $folderlistuser $folderlist
        tslog "Force-updated cached list"
    elif [ ! $folderlist -nt $folderlistuser ]; then
        tslog "Difference found between cached and original user list"
        cp -f $folderlistuser $folderlist
        tslog "Updated cached list"
    else
        tslog "No update made to cached list"
    fi

# Reinit -------------------------------------------------
elif [ "$1" == "reinit" ]; then
    tsbinds unbind all
    $MODDIR/service.sh

# Enable or disable --------------------------------------
elif [ "$1" == "disable" ]; then
    touch $MODDIR/disable.txt
    tslog "ts-binds automatic bind disabled"
elif [ "$1" == "enable" ]; then
    rm -f $MODDIR/disable.txt
    tslog "ts-binds automatic bind enabled"

# Print log ----------------------------------------------
elif [ "$1" == "log" ]; then
    cat $logfile
    echo
    
# Print mount --------------------------------------------
elif [ "$1" == "mount" ]; then
    supass mount
    echo
    
# Print folder pairs -------------------------------------
elif [ "$1" == "pairs" ]; then
    while IFS='' read -r line || [[ -n "$line" ]]; do
        if ! (echo $line | grep -Eo "#\| +" > /dev/null 2> /dev/null); then
            echo $line | awk '{print $2}'
        fi
    done < $folderlist

# Action unrecognised ------------------------------------
else
    echo "E: Unknown action \"$1\" supplied"
fi

# Force log proper permission ----------------------------
chown 1023:1023 $logfile $folderlistuser $folderlist
chmod 0664 $logfile $folderlistuser $folderlist
