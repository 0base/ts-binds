#!/system/xbin/bash
if ! ls /data > /dev/null 2> /dev/null; then
    echo "[!] ERROR"
    echo "    ts-binds needs to be invoked"
    echo "    from an elevated shell."
    echo "    Please run 'su' first."
    echo ""
    echo "Terminating.."
    exit 1
fi
MODDIR=/magisk/ts-binds
int=/data/media/0
sd=/mnt/media_rw/
sdnamecache=$MODDIR/sdname.sh
folderlist=$MODDIR/folderlist.sh
folderlistuser=$int/ts-binds-folderlist.txt
logfile=$int/ts-binds.log
if [ -f $sdnamecache ]; then
    source $sdnamecache
else
    for sdname in $(ls /mnt/media_rw); do
       if echo "$sdname" | grep -Eoq '[0-9A-F]{4}-[0-9A-F]{4}'; then
           echo sdname=$sdname > $sdnamecache
           break
       fi
    done
fi
sd=$sd$sdname
function printhelp {
    echo "tsbinds [options] [arg]"
    echo ""
    echo "Available options:"
    echo ""
    echo "bind <bind name>    Binds a specific entry"
    echo "                    by its name"
    echo "bind all            Binds all entries "
    echo "unbind <bind name>  Unbinds a specific"
    echo "                    entry by its name"
    echo "unbind all          Unbinds all entries"
    echo "update              Update cached entries if"
    echo "                    the user's entries are"
    echo "                    modified"
    echo "update f            Update cached entries"
    echo "                    regardless if the user's"
    echo "                    entries are modified"
    echo "reinit              Re-run the script that"
    echo "                    runs on boot (may show"
    echo "                    unmount errors)"
}
function tslog {
    echo -e "$(date +'%F %T'):\n  $1\n" >> $logfile
    echo -e "$1"
}
if [ ! $1 ]; then
    echo "E: No action is declared!"
    echo ''
    printhelp
elif [ $1 == "help" ] || [ $1 == "h" ]; then
    printhelp
elif [ $1 == "bind" ]; then
    if [ ! $2 ]; then
        echo 'E: Bind name is not provided!';
    elif [ $2 == "all" ]; then
        function folderbind {
            if [ ! "$1" ]; then
                tslog "Bind syntax error! Bind name not given"
                return 1
            elif [ ! "$2" ]; then
                tslog "Bind syntax error! Invalid SD CARD path"
                return 1
            elif [ ! "$3" ]; then
                tslog "Bind syntax error! Invalid INTERNAL STORAGE path"
                return 1
            elif [ ! -d "$sd$2" ]; then
                tslog "Bind aborted: Folder '$sd$2' on SD CARD doesn't exist!"
                return 1
            elif [ ! -d "$int$3" ]; then
                tslog "Bind aborted: Folder '$int$3' on INTERNAL STORAGE doesn't exist!"
                return 1
            else
                mount -o bind "$sd$2" "$int$3" && tslog "Bind successful: $sd$2" || tslog "Bind failed: $sd$2"
            fi
        }
        tslog "Binding all entries"
        source $folderlist
        tslog "All entries were processed"
    elif ! grep -q $2 $folderlist; then
        tslog "Unable to bind $2, entry not found in list!"
    else
        function folderbind {
            grep -q $int$3 /proc/mounts
        }
        if eval $(grep $2 $folderlist); then
            tslog "$2 is already binded"
        else
            function folderbind {
                mount -o bind "$sd$2" "$int$3" && tslog "Bind successful: $sd$2" || tslog "Bind failed: $sd$2"
            }
            tslog "Binding $2"
            eval $(grep $2 $folderlist)
        fi
    fi
elif [ $1 == "unbind" ]; then
    if [ ! $2 ]; then
        echo 'E: Bind name is not provided!';
    elif [ $2 == "all" ]; then
        function folderbind {
            if [ ! "$1" ]; then
                tslog "Bind syntax error! Bind name not given"
                return 1
            elif [ ! "$2" ]; then
                tslog "Bind syntax error! Invalid SD CARD path"
                return 1
            elif [ ! "$3" ]; then
                tslog "Bind syntax error! Invalid INTERNAL STORAGE path"
                return 1
            elif [ ! -d "$sd$2" ]; then
                tslog "Bind aborted: Folder '$sd$2' on SD CARD doesn't exist!"
                return 1
            elif [ ! -d "$int$3" ]; then
                tslog "Bind aborted: Folder '$int$3' on INTERNAL STORAGE doesn't exist!"
                return 1
            else
                umount "$int$3" && tslog "Unbind successful: $sd$2" || tslog "Unbind failed: $sd$2"
            fi
        }
        tslog "Unbinding all entries"
        source $folderlist
        tslog "All entries were processed"
    elif ! grep -q $2 $folderlist; then
        tslog "Unable to bind $2, entry not found in list!"
    else
        function folderbind {
            grep -q $int$3 /proc/mounts
        }
        if ! eval $(grep $2 $folderlist); then
            tslog "$2 is already unbinded"
        else
            function folderbind {
                umount "$int$3" && tslog "Unbind successful: $sd$2" || tslog "Unbind failed: $sd$2"
            }
            tslog "Unbinding $2"
            eval $(grep $2 $folderlist)
        fi
    fi
elif [ $1 == "check" ]; then
    if [ ! $2 ]; then
        echo 'E: Bind name is not provided!';
    elif [ $2 == "all" ]; then
        function folderbind {
            grep -q $int$3 /proc/mounts && tslog "$2 is BINDED" || tslog "$2 is NOT binded"
        }
        source $folderlist
        tslog "All entries were checked"
    elif ! grep -q $2 $folderlist; then
        tslog "Unable to check $2, entry not found in list!"
    else
        function folderbind {
            grep -q $int$3 /proc/mounts
        }
        if eval $(grep $2 $folderlist); then
            tslog "$2 is BINDED"
        else
            tslog "$2 is NOT binded"
        fi
    fi
elif [ $1 == "update" ]; then
    if [ $2 == "f" ]; then
        cp -f $folderlistuser $folderlist
        tslog "Force-updated cached list"
    elif [ ! $folderlist -nt $folderlistuser ]; then
        tslog "Difference found between cached and original user list"
        cp -f $folderlistuser $folderlist
        chmod 0755 $folderlist
        chown 0:0 $folderlist
        tslog "Updated cached list"
    else
        tslog "No update made to cached list"
    fi
elif [ $1 == "move" ]; then
    if [ ! $2 ]; then
        echo 'E: Bind name is not provided!';
    elif [ $2 == "all" ]; then
        tsbinds unbind all
        function folderbind {
            mv -f $int$3/* $sd$2/ && tslog "Files moved successfully" || tslog "Moving operation failed"
        }
        source $folderlist
        tslog "All entries were processed"
        tsbinds bind all
    elif ! grep -q $2 $folderlist; then
        tslog "Unable to move contents for $2, entry not found in list!"
    else
        function folderbind {
            grep -q $int$3 /proc/mounts
        }
        if eval $(grep $2 $folderlist); then
            wasBinded=yes
            function folderbind {
                umount "$int$3" && tslog "Unbind successful: $sd$2" || tslog "Unbind failed: $sd$2"
            }
            eval $(grep $2 $folderlist)
        fi
        function folderbind {
            mv -f $int$3/* $sd$2/ && tslog "Files moved successfully" || tslog "Moving operation failed"
        }
        eval $(grep $2 $folderlist)
        if [ $wasBinded == "yes" ]; then
            function folderbind {
                mount -o bind "$sd$2" "$int$3" && tslog "Bind successful: $sd$2" || tslog "Bind failed: $sd$2"
            }
            eval $(grep $2 $folderlist)
        fi
    fi
elif [ $1 == "reinit" ]; then
    tsbinds unbind all
    $MODDIR/service.sh
else
    echo "E: Unknown action \"$1\" supplied"
fi
chown root:root $logfile
chmod 0666 $logfile
