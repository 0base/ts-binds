#!/system/xbin/bash
if ! ls /data > /dev/null 2> /dev/null; then
    echo "[!] ERROR"
    echo "    ts-binds needs to be invoked"
    echo "    from an elevated shell."
    echo "    Please run 'su' first."
    echo ""
    echo "Terminating.."
    exit 1
fi
MODDIR=/magisk/ts-binds
int=/data/media/0
sd=/mnt/media_rw/
sdnamecache=$MODDIR/sdname.sh
folderlist=$MODDIR/folderlist.sh
folderlistuser=$int/ts-binds-folderlist.txt
logfile=$int/ts-binds.log
if [ -f $sdnamecache ]; then
    source $sdnamecache
else
    for sdname in $(ls /mnt/media_rw); do
       if echo "$sdname" | grep -Eoq '[0-9A-F]{4}-[0-9A-F]{4}'; then
           echo sdname=$sdname > $sdnamecache
           break
       fi
    done
fi
sd=$sd$sdname
function printhelp {
    echo "tsbinds [options] [arg]"
    echo ""
    echo "Available options:"
    echo ""
    echo "bind <bind name> .. Binds a specific entry"
    echo "                    by its name"
    echo "bind all .......... Binds all entries "
    echo "unbind <bind name>  Unbinds a specific"
    echo "                    entry by its name"
    echo "unbind all ........ Unbinds all entries"
    echo "check <bind name> . Check if an entry is binded"
    echo "check all ......... Check if all entries are"
    echo "                    individually binded"
    echo "update ............ Update cached entries if"
    echo "                    the user's entries are"
    echo "                    modified"
    echo "update f .......... Update cached entries"
    echo "                    regardless if the user's"
    echo "                    entries are modified"
    echo "move <bind name> .. Unbind and then move"
    echo "                    specific recursing files"
    echo "                    and folders to the"
    echo "                    SD card path"
    echo "move all .......... Unbind and then move"
    echo "                    all recursing files"
    echo "                    and folders to the"
    echo "                    SD card path"
    echo "reinit ............ Re-run the script that"
    echo "                    runs on boot"
    echo ""
    echo "Note: running a command with \"all\" argument may return"
    echo "      \"unmount\" errors for some functions. Most of the"
    echo "      time they can be safely ignored."
}
function tslog {
    echo -e "$(date +'%F %T'):\n  $1\n" >> $logfile
    echo -e "$1"
}
if [ ! $1 ]; then
    echo "E: No action is declared!"
    echo ''
    printhelp
elif [ $1 == "help" ] || [ $1 == "h" ]; then
    printhelp
elif [ $1 == "bind" ]; then
    function folderbind {
        if grep -q $int$3 /proc/mounts; then
            tslog "$1 is already binded"
        elif [ ! -d "$sd$2" ]; then
            tslog "Bind aborted: Folder '$sd$2' on SD CARD doesn't exist!"
            return 1
        elif [ ! -d "$int$3" ]; then
            tslog "Bind aborted: Folder '$int$3' on INTERNAL STORAGE doesn't exist!"
            return 1
        else
            mount -o bind "$sd$2" "$int$3" && tslog "Bind successful: $1" || tslog "Bind failed: $1"
        fi
    }
    if [ ! $2 ]; then
        echo 'E: Bind name is not provided!';
    elif [ $2 == "all" ]; then
        tslog "Binding all entries"
        source $folderlist
        tslog "All entries were processed"
    elif line=$(grep $2 $folderlist); then
        eval $line
    else
        tslog "Unable to bind $2, entry not found in list!"
    fi
elif [ $1 == "unbind" ]; then
    function folderbind {
        if grep -q $int$3 /proc/mounts; then
            tslog "$1 is already unbinded"
        else
            umount "$int$3" && tslog "Unbind successful: $1" || tslog "Unbind failed: $1"
        fi
    }
    if [ ! $2 ]; then
        echo 'E: Bind name is not provided!';
    elif [ $2 == "all" ]; then
        tslog "Unbinding all entries"
        source $folderlist
        tslog "All entries were processed"
    elif line=$(grep $2 $folderlist); then
        eval $line
    else
        tslog "Unable to unbind $2, entry not found in list!"
    fi
elif [ $1 == "check" ]; then
    function folderbind {
        grep -q $int$3 /proc/mounts && tslog "$1 is BINDED" || tslog "$1 is NOT binded"
    }
    if [ ! $2 ]; then
        echo 'E: Bind name is not provided!';
    elif [ $2 == "all" ]; then
        source $folderlist
        tslog "All entries were checked"
    elif line=$(grep $2 $folderlist); then
        eval $line
    else
        tslog "Unable to check $2, entry not found in list!"
    fi
elif [ $1 == "update" ]; then
    if [ $2 == "f" ]; then
        cp -f $folderlistuser $folderlist
        tslog "Force-updated cached list"
    elif [ ! $folderlist -nt $folderlistuser ]; then
        tslog "Difference found between cached and original user list"
        cp -f $folderlistuser $folderlist
        chmod 0755 $folderlist
        chown 0:0 $folderlist
        tslog "Updated cached list"
    else
        tslog "No update made to cached list"
    fi
elif [ $1 == "move" ]; then
    if [ ! $2 ]; then
        echo 'E: Bind name is not provided!'
    elif [ $2 == "all" ]; then
        tsbinds unbind all
        function folderbind {
            if [ "$(ls -A "$int$3")" ]; then
                mv -f "$int$3/"* "$sd$2/" && tslog "Files moved successfully for $1" || tslog "Moving operation failed for $1"
            else
                tslog "No files to move for $1"
            fi
        }
        source $folderlist
        tsbinds bind all
    elif line=$(grep $2 $folderlist); then
        function folderbind {
            if grep -q "$int$3" /proc/mounts; then
                wasBinded=yes
                tsbinds unbind $1
            fi
            if [ "$(ls -A "$int$3")" ]; then
                mv -f "$int$3/"* "$sd$2/" && tslog "Files moved successfully for $1" || tslog "Moving operation failed for $1"
            else
                tslog "No files to move for $1"
            fi
            if [ $wasBinded == "yes" ]; then
                tsbinds bind $1
            fi
        }
        eval $line;
    else
        tslog "Unable to move contents of $2, entry not found in list!"
    fi
elif [ $1 == "reinit" ]; then
    tsbinds unbind all
    $MODDIR/service.sh
else
    echo "E: Unknown action \"$1\" supplied"
fi
chown media_rw:media_rw $logfile
chmod 0664 $logfile
