#!/system/bin/sh
# sy

# All hail busybox for standardising this script!
busybox=/sbin/.core/busybox
oPATH=$PATH
PATH=$busybox:$oPATH
set -o pipefail

# Check if run under root --------------------------------
if ! ls /data > /dev/null 2> /dev/null; then
    echo "[!] ERROR"
    echo "    ts-binds needs to be invoked"
    echo "    from an elevated shell."
    echo "    Please run 'su' first."
    echo
    echo "Terminating.."
    exit 1
fi

# Functions ----------------------------------------------
MODDIR=/sbin/.core/img/ts-binds
datadir=/data/ts-binds
int=/mnt/runtime/default/emulated/0
intraw=/data/media/0
sdname=$(grep -m 1 "/mnt/media_rw/" /proc/mounts | grep -m 1 -Eo "[0-9A-Z]{4}-[0-9A-Z]{4}")
sd=/mnt/runtime/default/$sdname
legacy=0
folderlist=$datadir/cached-folderlist.sh
folderlistuser=$intraw/ts-binds-folderlist.txt

if [ -f $datadir/legacy ]; then
    legacy=1
    int=$intraw
    sd=/mnt/media_rw/$sdname
fi

supass() {
    /sbin/su -M -c "$@"
}

printhelp() {
    echo "tsbinds [options] [arg]"
    echo
    echo "Available options:"
    echo
    echo "help ............... Show this reference text"
    echo "h .................. Ditto"
    echo "pairs .............. Prints out the folder"
    echo "                     pairs in folderlist"
    echo "bind <pair name> ... Binds a specific pair"
    echo "                     entry by its name"
    echo "bind o <src> <des> . Binds <src> to <des>"
    echo "bind all ........... Binds all entries "
    echo "bind o <src> <des> . Binds <src> to <des>"
    echo "unbind <pair name> . Unbinds a specific pair"
    echo "                     entry by its name"
    echo "unbind all ......... Unbinds all entries"
    echo "unbind o <des> ..... Unbinds <des>"
    echo "check <pair name> .. Check if an entry is binded"
    echo "check all .......... Check if all entries are"
    echo "                     individually binded"
    echo "update ............. Update cached entries if"
    echo "                     the user's entries are"
    echo "                     modified"
    echo "update f ........... Update cached entries"
    echo "                     regardless if the user's"
    echo "                     entries are modified"
    echo "reinit ............. Re-run the script that"
    echo "                     runs on boot"
    echo "disable ............ Disables automatic "
    echo "                     mounting on boot"
    echo "enable ............. Enables automatic "
    echo "                     mounting on boot"
    echo "mode <option> ...... Options:"
    echo "                     'default' uses SDCardFS"
    echo "                     'legacy'  uses FUSE"
    echo "                     'device'  uses device default"
    echo "reset .............. Resets ts-binds"
    echo "                     configurations. folderlist"
    echo "                     won't be affected."

    echo
}

# Corrective measures ------------------------------------
# this will soon be a fully fledged detection system
#if [ $legacy = 0 ]; then
#    emulated=$(grep -i "/data/media on /storage/emulated type sdcardfs" /proc/mounts)
#    gid=$((echo "$emulated" | grep -Eo "\bgid=[0-9]+\b") | grep -Eo "[0-9]+")
#    mask=$((echo "$emulated" | grep -Eo "\bmask=[0-9]+\b") | grep -Eo "[0-9]+")
#    if [ $gid != 9997 ]; then
#        if [ $mask != 7 ]; then
#            supass mount -o remount,gid=9997,mask=7 /storage/emulated
#        else
#            supass mount -o remount,gid=9997 /storage/emulated
#        fi
#    fi
#fi

# No action given ----------------------------------------
if [ ! "$1" ]; then
    echo "E: No action is declared!"
    echo ''
    printhelp

# Print Help ---------------------------------------------
elif [ "$1" = "help" ] || [ "$1" = "h" ]; then
    printhelp

# Bind ---------------------------------------------------
elif [ "$1" = "bind" ]; then
    folderbind() {
        if supass mountpoint -q \""$3"\"; then
            echo "$1 is already binded"
        elif [ ! -d "$2" ] && [ ! -f "$2" ]; then
            echo "Bind aborted: Folder '$2' as source doesn't exist!"
            exit 1
        elif [ ! -d "$3" ] && [ ! -f "$3" ]; then
            echo "Bind aborted: Folder '$3' as target doesn't exist!"
            exit 1
        else
            echo "Binding $1"
            if supass mount --rbind \""$2"\" \""$3"\"; then
                if [ $legacy != "1" ] && { echo "$3" | grep -q "$int" }; then
                    intr="$(echo "$3" | sed 's/\/mnt\/runtime\/default/\/mnt\/runtime\/read/g')"
                    intw="$(echo "$3" | sed 's/\/mnt\/runtime\/default/\/mnt\/runtime\/write/g')"
                    (supass mount -o remount,gid=9997,mask=6 \""$intr"\") || exit 1
                    (supass mount -o remount,gid=9997,mask=6 \""$intw"\") || exit 1
                fi
                echo "Bind successful"
            else
                echo "Bind failed"
                exit 1
            fi
        fi
    }
    if [ ! "$2" ]; then
        echo 'E: Bind name is not provided!'
    elif [ "$2" = "all" ]; then
        echo "Binding all entries"
        . $folderlist
        echo "All entries were processed"
    elif [ "$2" = "o" ]; then
        folderbind "o" "$3" "$4"
    elif line="$(grep -m 1 "$2" $folderlist)"; then
        eval "$line"
    else
        echo "Unable to bind $2, entry not found in list!"
    fi

# Unbind -------------------------------------------------
elif [ "$1" = "unbind" ]; then
    folderbind() {
        if ! supass mountpoint -q \""$3"\"; then
            echo "$1 is already unbinded"
        else
            echo "Unbinding $1"
            if supass umount \""$3"\"
                then echo "Unbind successful: $1"
                else echo "Unbind failed: $1"; exit 1
            fi
        fi
    }
    if [ ! "$2" ]; then
        echo 'E: Bind name is not provided!'
    elif [ "$2" = "all" ]; then
        echo "Unbinding all entries"
        . $folderlist
        echo "All entries were processed"
    elif [ "$2" = "o" ]; then
        folderbind "o" "$3" "$4"
    elif line="$(grep -m 1 "$2" $folderlist)"; then
        eval "$line"
    else
        echo "Unable to unbind $2, entry not found in list!"
    fi

# Check --------------------------------------------------
elif [ "$1" = "check" ]; then
    folderbind() {
        if supass mountpoint -q \""$3"\"
            then echo "$1 is BINDED"
            else echo "$1 is NOT binded"
        fi
    }
    if [ ! "$2" ]; then
        echo 'E: Bind name is not provided!'
    elif [ "$2" = "all" ]; then
        . $folderlist
        echo "All entries were checked"
    elif line="$(grep -m 1 "$2" $folderlist)"; then
        eval "$line"
    else
        echo "Unable to check $2, entry not found in list!"
    fi

# Update -------------------------------------------------
elif [ "$1" = "update" ]; then
    if [ ! -d $datadir ]; then
        cp -R $MODDIR/data $datadir
        echo "Copied data folder to /data"
        tsbinds update
    elif [ ! -f $folderlistuser ]; then
        cp $datadir/fresh-folderlist.txt $folderlistuser
        echo "Copied user list to internal storage"
        chown 1023:1023 $folderlistuser
        chmod 0664 $folderlistuser
        tsbinds update
    elif [ ! -f $folderlist ]; then
        cp $folderlistuser $folderlist
        echo "Cached the user list"
    elif [ "$2" ] && [ "$2" = "f" ]; then
        cp -f $folderlistuser $folderlist
        echo "Force-updated cached list"
    elif [ ! $folderlist -nt $folderlistuser ]; then
        echo "Difference found between cached and original user list"
        cp -f $folderlistuser $folderlist
        echo "Updated cached list"
    else
        echo "No update made to cached list"
    fi

# Reinit -------------------------------------------------
elif [ "$1" = "reinit" ]; then
    tsbinds unbind all
    $MODDIR/service.sh

# Enable or disable --------------------------------------
elif [ "$1" = "disable" ]; then
    if [ ! -f $datadir/disable ]; then
        touch $datadir/disable
        echo "ts-binds automatic bind disabled"
    else
        echo "Already disabled!"
    fi
elif [ "$1" = "enable" ]; then
    if [ ! -f $datadir/disable ]; then
        echo "Already enabled!"
    else
        rm -f $datadir/disable
        echo "ts-binds automatic bind enabled"
    fi

# Print folder pairs -------------------------------------
elif [ "$1" = "pairs" ]; then
    while IFS='' read -r line || [[ -n "$line" ]]; do
        if ! (echo "$line" | grep -Eo "#\| +" > /dev/null 2> /dev/null); then
            echo "$line" | awk '{print $2}'
        fi
    done < $folderlist

# Force change binding mode ------------------------------
elif [ "$1" = "mode" ]; then
    if [ ! "$2" ]; then
        echo "You need to decide if legacy on or legacy off!"
        echo "tsbinds mode legacy      :: to force on (FUSE)"
        echo "tsbinds mode default     :: to force off (SDCardFS)"
        echo "tsbinds mode device      :: to fallback to device default"
    elif [ "$2" = "default" ]; then
        echo "Forcing SDCardFS"
        if [ -f $datadir/legacy ]; then rm -f $datadir/legacy; fi
        echo "ro.sys.sdcardfs=true" > $MODDIR/system.prop
        echo "persist.sys.sdcardfs=force_on" >> $MODDIR/system.prop
        echo "persist.fuse_sdcard=false" >> $MODDIR/system.prop
    elif [ "$2" = "legacy" ]; then
        echo "Forcing FUSE"
        if [ ! -f $datadir/legacy ]; then touch $datadir/legacy; fi
        echo "ro.sys.sdcardfs=false" > $MODDIR/system.prop
        echo "persist.sys.sdcardfs=force_off" >> $MODDIR/system.prop
        echo "persist.fuse_sdcard=true" >> $MODDIR/system.prop
    elif [ "$2" = "device" ]; then
        echo "Setting Default"
        if [ -f $datadir/legacy-device ] && [ ! -f $datadir/legacy ]; then touch $datadir/legacy; fi
        if [ -f $MODDIR/system.prop ]; then rm -f $MODDIR/system.prop; fi
    else
        echo "Unknown parameter: ${2}!"
    fi

# Reset configs ------------------------------------------
elif [ "$1" = "reset" ]; then
    echo "Purging data folder"
    rm -Rf $datadir
    tsbinds update

# Action unrecognised ------------------------------------
else
    echo "E: Unknown action \"$1\" supplied"
fi

# Handover default PATH ----------------------------------
# in case somebody sourced this fakebin
PATH=$oPATH
set +o pipefail